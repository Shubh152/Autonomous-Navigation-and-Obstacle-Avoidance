<?xml version="1.0"?>
<robot name="sam_bot" xmlns:xacro="http://ros.org/wiki/xacro">

<!-- Define robot constants -->
<xacro:property name="base_width" value="1"/>
<xacro:property name="base_length" value="2"/>
<xacro:property name="base_height" value="0.75"/>

<xacro:property name="wheel_radius" value="0.4"/>
<xacro:property name="wheel_width" value="0.2"/>
<xacro:property name="wheel_ygap" value="0.1"/>
<xacro:property name="wheel_zoff" value="0.05"/>
<xacro:property name="wheel_xoff" value="0.75"/>

<xacro:property name="caster_xoff" value="0.654"/>

<xacro:property name="lidar_xoff" value="0.25"/>
<xacro:property name="lidar_width" value="0.07"/>
<xacro:property name="lidar_radius" value="0.15"/>

<!-- <link name="dummy_base"></link> -->

<gazebo>
  <pose>0 0 ${(wheel_radius + wheel_zoff)} 0 0 0</pose>
</gazebo>

<!-- Robot Base -->
<!-- <link name="dummy"/>  
<joint name="dummy_to_base_link=" type="fixed">  
    <parent link="dummy"/>  
     <child link="base_link"/>  
</joint> -->

<link name="base_link">
    <visual>
      <geometry>
        <box size="${base_length} ${base_width} ${base_height}"/>
      </geometry>
      <material name="Cyan">
        <color rgba="0 0 1.0 1.0"/>
      </material>
    </visual>

    <inertial>
      <mass value="1.14395"></mass>
      <inertia ixx="0.095328999999999997" ixy="0" ixz="0" iyz="0" iyy="0.38131700000000002" izz="0.47664600000000001">
      </inertia>
    </inertial>

    <collision>
      <geometry>
        <box size="${base_length} ${base_width} ${base_height}"/>
      </geometry>
      <!-- <surface>
        <friction>
          <ode/>
        </friction>
        <bounce/>
        <contact/>
      </surface> -->
    </collision>
  </link>

  <!-- Robot Footprint -->
  <link name="base_footprint"/>

  <joint name="base_joint" type="fixed">
    <parent link="base_link"/>
    <child link="base_footprint"/>
    <origin xyz="0.0 0.0 ${-(wheel_radius+wheel_zoff)}" rpy="0 0 0"/>
  </joint>

  <!-- Wheels -->
  <xacro:macro name="wheel" params="prefix x_reflect y_reflect">
    <link name="${prefix}_link">
      <visual>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
        <geometry>
            <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
        </geometry>
        <material name="Gray">
          <color rgba="0.5 0.5 0.5 1.0"/>
        </material>
      </visual>

      <inertial>
        <mass value="1"></mass>
        <inertia ixx="0.043333000000000003" ixy="0" ixz="0" iyy="0.043333000000000003" iyz="0" izz="0.080000000000000002">
        </inertia>
      </inertial>

      <collision name='collision'>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
        <geometry>
            <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
        </geometry>
      </collision>
    </link>

    <joint name="${prefix}_joint" type="continuous">
      <parent link="base_link"/>
      <child link="${prefix}_link"/>
      <origin xyz="${x_reflect*wheel_xoff} ${y_reflect*(base_width/2+wheel_ygap)} ${-wheel_zoff}" rpy="0 0 0"/>
      <axis xyz="0 1 0"/>
    </joint>


  </xacro:macro>

  <xacro:wheel prefix="drivewhl_l" x_reflect="-1" y_reflect="1" />
  <xacro:wheel prefix="drivewhl_r" x_reflect="-1" y_reflect="-1" />

  <!-- Caster Wheel -->
  <link name="front_caster">
    <visual>
      <geometry>
        <sphere radius="${(wheel_radius+wheel_zoff-(base_height/2))}"/>
      </geometry>
      <material name="Red">
        <color rgba="1.0 0 0 1.0"/>
      </material>
    </visual>
    <inertial>
      <mass value="1"></mass>
      <inertia ixx="0.016" iyy="0.016" izz="0.016" ixy="0" ixz="0" iyz="0">
      </inertia>
    </inertial>
    <collision>
      <geometry>
        <sphere radius="${(wheel_radius+wheel_zoff-(base_height/2))}"/>
      </geometry>
    </collision>
  </link>

  <joint name="caster_joint" type="continuous">
    <parent link="base_link"/>
    <child link="front_caster"/>
    <origin xyz="${caster_xoff} 0.0 ${-(base_height/2)}" rpy="0 0 0"/>
  </joint>

  <link name='lidar_link'>
    <inertial>
    <mass value="0.1"></mass>
    <inertia ixx="7.58" iyy="7.58" izz="0.000125" ixz="0" ixy="0" iyz="0">
    </inertia>
    </inertial>
    <visual>
      <geometry>
          <cylinder radius="${lidar_radius}" length="${lidar_width}">
          </cylinder>
      </geometry>
      <material name="Green">
        <color rgba="0 1 0 1"></color>
      </material>
    </visual>
    <collision>
      <geometry>
          <cylinder radius="${lidar_radius}" length="${lidar_width}">
          </cylinder>
      </geometry>
    </collision>
  </link>

  <joint name="lidar_joint" type="fixed">
    <parent link="base_link"/>
      <child link="lidar_link"/>
    <origin xyz="${lidar_xoff} 0 ${(base_height/2 + lidar_width/2)}" rpy="0 0 0"/>
  </joint>
      <!-- <sensor name='gpu_lidar'>
      <pose>0 0 0 0 0 0</pose>
      <topic>/lidar</topic>
      <update_rate>1</update_rate>
      <enable_metrics>false</enable_metrics>
      <lidar>
          <scan>
          <horizontal>
              <samples>640</samples>
              <resolution>1</resolution>
              <min_angle>-2.6179963000000002</min_angle>
              <max_angle>2.6179963000000002</max_angle>
          </horizontal>
          <vertical>
              <samples>16</samples>
              <min_angle>-0.261799</min_angle>
              <max_angle>0.261799</max_angle>
              <resolution>1</resolution>
          </vertical>
          </scan>
          <range>
          <min>0.080000000000000002</min>
          <max>10</max>
          <resolution>0.01</resolution>
          </range>
          <noise>
          <type>none</type>
          <mean>0</mean>
          <stddev>0</stddev>
          </noise>
          <visibility_mask>4294967295</visibility_mask>
      </lidar>
      </sensor>
      <enable_wind>false</enable_wind> -->
  <gazebo reference="lidar_link">
    <sensor name="lidar" type="gpu_lidar">
      <topic>base_lidar</topic>
      <always_on>true</always_on>
      <visualize>true</visualize>
      <update_rate>30</update_rate>
      <frame_id>lidar_link</frame_id>
      <lidar>
        <scan>
          <horizontal>
            <samples>640</samples>
            <resolution>1</resolution>
            <min_angle>-2.6179963000000002</min_angle>
            <max_angle>2.6179963000000002</max_angle>
          </horizontal>
          <vertical>
            <samples>16</samples>
            <min_angle>-0.261799</min_angle>
            <max_angle>0.261799</max_angle>
            <resolution>1</resolution>
          </vertical>
        </scan>
        <range>
          <min>0.120000</min>
          <max>3.5</max>
          <resolution>0.015000</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </lidar>
    </sensor>
  </gazebo>

  <gazebo>
    <plugin name='gz::sim::systems::DiffDrive' filename='gz-sim-diff-drive-system'>
      <left_joint>drivewhl_l_joint</left_joint>
      <right_joint>drivewhl_r_joint</right_joint>
      <wheel_separation>1.2</wheel_separation>
      <wheel_radius>0.4</wheel_radius>
      <tf_topic>/diff_drive/tf</tf_topic>
      <topic>cmd_vel</topic>
      <odom_publish_frequency>30</odom_publish_frequency>
      <!-- <odom_topic>sam_bot/odom</odom_topic> -->
      <frame_id>odom</frame_id>
      <child_frame_id>base_link</child_frame_id>
    </plugin>
  </gazebo>

  <gazebo reference="base_link">
    <sensor name="imu_sensor" type="imu">
      <always_on>true</always_on>
      <topic>base_imu</topic>
      <visualize>true</visualize>
      <update_rate>30</update_rate>
      <imu>
        <angular_velocity>
          <x>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </x>
          <y>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </y>
          <z>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </z>
        </angular_velocity>
        <linear_acceleration>
          <x>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </x>
          <y>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </y>
          <z>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </z>
        </linear_acceleration>
      </imu>
    </sensor>
  </gazebo>
</robot>
